{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "atote-dev-data-factory"
		},
		"AzureDataLakeStorage_LS_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage_LS'"
		},
		"AzureDatabricksDeltaLake_LS_accessToken": {
			"type": "secureString",
			"metadata": "Secure string for 'accessToken' of 'AzureDatabricksDeltaLake_LS'"
		},
		"OnPremSQLServerGenric_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'OnPremSQLServerGenric'"
		},
		"OnPremSQLServer_LS_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'OnPremSQLServer_LS'"
		},
		"AzureDataLakeStorage_LS_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://ucstorageaccatote.dfs.core.windows.net/"
		},
		"AzureKeyVault1_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://atotedekeyvault.vault.azure.net/"
		},
		"OnPremSQLServerGenric_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "localhost,1436"
		},
		"OnPremSQLServerGenric_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "@{linkedService().DBName}"
		},
		"OnPremSQLServerGenric_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "sa"
		},
		"OnPremSQLServer_LS_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "localhost,1436"
		},
		"OnPremSQLServer_LS_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "AdventureWorks2019"
		},
		"OnPremSQLServer_LS_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "sa"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage_LS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage_LS_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage_LS_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDatabricksDeltaLake_LS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricksDeltaLake",
				"typeProperties": {
					"domain": "https://adb-3249081727790063.3.azuredatabricks.net",
					"clusterId": "1210-131254-pzzv65th",
					"accessToken": {
						"type": "SecureString",
						"value": "[parameters('AzureDatabricksDeltaLake_LS_accessToken')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureKeyVault1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVault1_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DesktopIR')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/GenericParquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage_LS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Container_Name": {
						"type": "string"
					},
					"Container_Path": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().Container_Path",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().Container_Name",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GenricCSVRead')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage_LS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Container_Name": {
						"type": "string"
					},
					"Container_Path": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().Container_Path",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().Container_Name",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OnPremSQLServerGenric')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"server": "[parameters('OnPremSQLServerGenric_properties_typeProperties_server')]",
					"database": "[parameters('OnPremSQLServerGenric_properties_typeProperties_database')]",
					"encrypt": "optional",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('OnPremSQLServerGenric_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('OnPremSQLServerGenric_password')]"
					}
				},
				"connectVia": {
					"referenceName": "DesktopIR",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/DesktopIR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OnPremSQLServer_LS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"server": "[parameters('OnPremSQLServer_LS_properties_typeProperties_server')]",
					"database": "[parameters('OnPremSQLServer_LS_properties_typeProperties_database')]",
					"encrypt": "optional",
					"trustServerCertificate": true,
					"authenticationType": "SQL",
					"userName": "[parameters('OnPremSQLServer_LS_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('OnPremSQLServer_LS_password')]"
					}
				},
				"connectVia": {
					"referenceName": "DesktopIR",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/DesktopIR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OnpremSQLTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OnPremSQLServerGenric",
					"type": "LinkedServiceReference",
					"parameters": {
						"DBName": "AdventureWorks2019"
					}
				},
				"parameters": {
					"SQLSchema": {
						"type": "string"
					},
					"SQLTablename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SQLSchema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().SQLTablename",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OnPremSQLServerGenric')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DeltaLoad Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ReadIngestionSheet",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "GenricCSVRead",
								"type": "DatasetReference",
								"parameters": {
									"Container_Name": {
										"value": "@pipeline().parameters.Config_Container_Name",
										"type": "Expression"
									},
									"Container_Path": {
										"value": "@pipeline().parameters.Config_File_Path",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "FailEmail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "ReadIngestionSheet",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {},
							"url": "https://prod-16.centralindia.logic.azure.com:443/workflows/78c6156915654bdf81f9e856a714dc75/triggers/When_a_HTTP_request_is_received/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2FWhen_a_HTTP_request_is_received%2Frun&sv=1.0&sig=Z2h2l_VqJunF4Hb5QhaabJG2x9pJ-O0RzUNTCs4KWT4",
							"body": {
								"ADF_Name": "dafd",
								"ADF_RunID": "asda",
								"Error_Message": "asdad",
								"PipelineID": "asdad"
							}
						}
					},
					{
						"name": "Ingest Each Entity",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ReadIngestionSheet",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ReadIngestionSheet').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Delta Copy To Bronze Layer",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Check if Table for Delta Load Is Empty",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@contains(activity('Check if Table for Delta Load Is Empty').output,'firstRow')",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Ingest Entity Delta Load",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"sqlReaderQuery": {
															"value": "@concat('Select * from ', item().Schema_Name, '.', item().Table_Name, ' where CAST( ModifiedDate AS DATE) =', '''', pipeline().parameters.Ingestion_date, '''')",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "ParquetSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "ParquetWriteSettings",
															"maxRowsPerFile": 100000
														}
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "OnpremSQLTable",
														"type": "DatasetReference",
														"parameters": {
															"SQLSchema": {
																"value": "@item().Schema_Name",
																"type": "Expression"
															},
															"SQLTablename": {
																"value": "@item().Table_Name",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "GenericParquet",
														"type": "DatasetReference",
														"parameters": {
															"Container_Name": {
																"value": "@pipeline().parameters.Lake_Container_Name",
																"type": "Expression"
															},
															"Container_Path": {
																"value": "@concat(pipeline().parameters.Lake_File_Path, '/' ,item().Table_Name,'/', 'Ingesion_date=' ,string(pipeline().parameters.Ingestion_date), '/' )",
																"type": "Expression"
															}
														}
													}
												]
											}
										]
									}
								},
								{
									"name": "Check if Table for Delta Load Is Empty",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Check if Data exist In Delta Load Date",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('Select * from ', item().Schema_Name, '.', item().Table_Name, ' where CAST( ModifiedDate AS DATE) =', '''', pipeline().parameters.Ingestion_date, '''')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "OnpremSQLTable",
											"type": "DatasetReference",
											"parameters": {
												"SQLSchema": "@item().Schema_Name",
												"SQLTablename": {
													"value": "@item().Table_Name",
													"type": "Expression"
												}
											}
										},
										"firstRowOnly": true
									}
								},
								{
									"name": "Chekck If Data Present for Ingestion Date",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "GenericParquet",
											"type": "DatasetReference",
											"parameters": {
												"Container_Name": {
													"value": "@pipeline().parameters.Lake_Container_Name",
													"type": "Expression"
												},
												"Container_Path": {
													"value": "@concat(pipeline().parameters.Lake_File_Path, '/' ,item().Table_Name,'/','Ingesion_date=',string(pipeline().parameters.Ingestion_date))\n",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"exists",
											"itemName",
											"itemType"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "ParquetReadSettings"
										}
									}
								},
								{
									"name": "Check if Data exist In Delta Load Date",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Chekck If Data Present for Ingestion Date",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@activity('Chekck If Data Present for Ingestion Date').output.exists",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Delete Data For Entity For Ingestion Date",
												"type": "Delete",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "GenericParquet",
														"type": "DatasetReference",
														"parameters": {
															"Container_Name": {
																"value": "@pipeline().parameters.Lake_Container_Name",
																"type": "Expression"
															},
															"Container_Path": {
																"value": "@concat(pipeline().parameters.Lake_File_Path, '/' ,item().Table_Name,'/','Ingesion_date=',string(pipeline().parameters.Ingestion_date))\n",
																"type": "Expression"
															}
														}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true,
														"enablePartitionDiscovery": false
													}
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Config_Container_Name": {
						"type": "string"
					},
					"Config_File_Path": {
						"type": "string"
					},
					"Lake_Container_Name": {
						"type": "string"
					},
					"Lake_File_Path": {
						"type": "string"
					},
					"Ingestion_date": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Data Ingestion"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/GenricCSVRead')]",
				"[concat(variables('factoryId'), '/datasets/OnpremSQLTable')]",
				"[concat(variables('factoryId'), '/datasets/GenericParquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FullLoad PipeLine')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ReadIngestionSheet",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "GenricCSVRead",
								"type": "DatasetReference",
								"parameters": {
									"Container_Name": {
										"value": "@pipeline().parameters.Config_Container_Name",
										"type": "Expression"
									},
									"Container_Path": {
										"value": "@pipeline().parameters.Config_File_Path",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "FailEmail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "ReadIngestionSheet",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {},
							"url": "https://prod-16.centralindia.logic.azure.com:443/workflows/78c6156915654bdf81f9e856a714dc75/triggers/When_a_HTTP_request_is_received/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2FWhen_a_HTTP_request_is_received%2Frun&sv=1.0&sig=Z2h2l_VqJunF4Hb5QhaabJG2x9pJ-O0RzUNTCs4KWT4",
							"body": {
								"ADF_Name": "dafd",
								"ADF_RunID": "asda",
								"Error_Message": "asdad",
								"PipelineID": "asdad"
							}
						}
					},
					{
						"name": "Ingest Each Entity",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ReadIngestionSheet",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ReadIngestionSheet').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Entity FullLoad Copy Activity",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Check if Table is Empty For FullLoad",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@contains(activity('Check if Table is Empty For FullLoad').output,'firstRow')",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Ingest Entity Full Load_copy1",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "ParquetSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "ParquetWriteSettings",
															"maxRowsPerFile": 100000
														}
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "OnpremSQLTable",
														"type": "DatasetReference",
														"parameters": {
															"SQLSchema": {
																"value": "@item().Schema_Name",
																"type": "Expression"
															},
															"SQLTablename": {
																"value": "@item().Table_Name",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "GenericParquet",
														"type": "DatasetReference",
														"parameters": {
															"Container_Name": {
																"value": "@pipeline().parameters.Lake_Container_Name",
																"type": "Expression"
															},
															"Container_Path": {
																"value": "@concat(pipeline().parameters.Lake_File_Path, '/' ,item().Table_Name,'/','Ingesion_date=',string(utcNow('yyyy-MM-dd')), '/' )",
																"type": "Expression"
															}
														}
													}
												]
											}
										]
									}
								},
								{
									"name": "Check if Table is Empty For FullLoad",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Is Entity Exist Before Delete",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "OnpremSQLTable",
											"type": "DatasetReference",
											"parameters": {
												"SQLSchema": "@item().Schema_Name",
												"SQLTablename": {
													"value": "@item().Table_Name",
													"type": "Expression"
												}
											}
										}
									}
								},
								{
									"name": "Check if Entity Exist in Lake",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "GenericParquet",
											"type": "DatasetReference",
											"parameters": {
												"Container_Name": {
													"value": "@pipeline().parameters.Lake_Container_Name",
													"type": "Expression"
												},
												"Container_Path": {
													"value": "@concat(pipeline().parameters.Lake_File_Path, '/' ,item().Table_Name)\n",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"exists",
											"itemName",
											"itemType"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "ParquetReadSettings"
										}
									}
								},
								{
									"name": "Is Entity Exist Before Delete",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Check if Entity Exist in Lake",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@activity('Check if Entity Exist in Lake').output.exists",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Delete Entity From lake if exist",
												"type": "Delete",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "GenericParquet",
														"type": "DatasetReference",
														"parameters": {
															"Container_Name": {
																"value": "@pipeline().parameters.Lake_Container_Name",
																"type": "Expression"
															},
															"Container_Path": {
																"value": "@concat(pipeline().parameters.Lake_File_Path, '/' ,item().Table_Name)",
																"type": "Expression"
															}
														}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true,
														"enablePartitionDiscovery": false
													}
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Config_Container_Name": {
						"type": "string"
					},
					"Config_File_Path": {
						"type": "string"
					},
					"Lake_Container_Name": {
						"type": "string"
					},
					"Lake_File_Path": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Data Ingestion"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/GenricCSVRead')]",
				"[concat(variables('factoryId'), '/datasets/OnpremSQLTable')]",
				"[concat(variables('factoryId'), '/datasets/GenericParquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataIngestion')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Load Type - Full Load",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(toLower(pipeline().parameters.MP_Ingestion_type),'fullload')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Execute Full Load Pipe Line",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "FullLoad PipeLine",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Config_Container_Name": {
												"value": "@pipeline().parameters.MP_Config_Container_Name",
												"type": "Expression"
											},
											"Config_File_Path": {
												"value": "@pipeline().parameters.MP_Config_File_Path",
												"type": "Expression"
											},
											"Lake_Container_Name": {
												"value": "@pipeline().parameters.MP_Lake_Container_Name",
												"type": "Expression"
											},
											"Lake_File_Path": {
												"value": "@pipeline().parameters.MP_Lake_File_Path",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Load Type - Delta Load",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Load Type - Full Load",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(toLower(pipeline().parameters.MP_Ingestion_type),'delta')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Execute Delta Load Pipeline",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "DeltaLoad Pipeline",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Config_Container_Name": {
												"value": "@pipeline().parameters.MP_Config_Container_Name",
												"type": "Expression"
											},
											"Config_File_Path": {
												"value": "@pipeline().parameters.MP_Config_File_Path",
												"type": "Expression"
											},
											"Lake_Container_Name": {
												"value": "@pipeline().parameters.MP_Lake_Container_Name",
												"type": "Expression"
											},
											"Lake_File_Path": {
												"value": "@pipeline().parameters.MP_Lake_File_Path",
												"type": "Expression"
											},
											"Ingestion_date": {
												"value": "@pipeline().parameters.MP_Ingestion_date",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"MP_Config_Container_Name": {
						"type": "string",
						"defaultValue": "deconfig"
					},
					"MP_Config_File_Path": {
						"type": "string",
						"defaultValue": "AdvantureWorksConfigs/ETL_Sheet_Input.csv"
					},
					"MP_Ingestion_date": {
						"type": "string"
					},
					"MP_Ingestion_type": {
						"type": "string"
					},
					"MP_Lake_Container_Name": {
						"type": "string",
						"defaultValue": "advbronzedatalake"
					},
					"MP_Lake_File_Path": {
						"type": "string",
						"defaultValue": "landing"
					}
				},
				"variables": {
					"tes123": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Data Ingestion"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-13T10:23:02Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/FullLoad PipeLine')]",
				"[concat(variables('factoryId'), '/pipelines/DeltaLoad Pipeline')]"
			]
		}
	]
}